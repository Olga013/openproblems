import openproblems
import tempfile
import os
import sys

TEMPDIR = tempfile.TemporaryDirectory()
SCRIPTS_DIR = os.path.dirname(os.path.abspath(__file__))
RESULTS_DIR = os.path.join(SCRIPTS_DIR, "..", "website", "data", "results")

def tasks(wildcards):
    return [os.path.join(TEMPDIR.name, "{}.json".format(t.__name__.split(".")[-1])) for t in openproblems.TASKS]

def all_methods(wildcards):
    return [os.path.join(TEMPDIR.name, task.__name__.split(".")[-1],
                         dataset.__name__,
                         "{}.result.json".format(method.__name__))
            for task in openproblems.TASKS
            for dataset in task.DATASETS
            for method in task.METHODS]

def methods(wildcards):
    task = getattr(openproblems.tasks, wildcards.task)
    return [os.path.join(TEMPDIR.name, wildcards.task, wildcards.dataset, "{}.result.json".format(m.__name__)) for m in task.METHODS]

def metrics(wildcards):
    task = getattr(openproblems.tasks, wildcards.task)
    return [os.path.join(TEMPDIR.name, wildcards.task, wildcards.dataset, wildcards.method, "{}.metric.json".format(m.__name__)) for m in task.METRICS]

def datasets(wildcards):
    return [os.path.join(RESULTS_DIR, task.__name__.split(".")[-1], "{}.json".format(d.__name__)) for task in openproblems.TASKS for d in task.DATASETS]

rule all:
    input:
        summary = "{}/../results.json".format(SCRIPTS_DIR),
        website = "{}/complete.temp".format(TEMPDIR),

rule website:
    input: datasets
    output: temp("{}/complete.temp".format(TEMPDIR))
    shell: "touch {output}"

rule summary:
    input:
        script = "collate_dataset.py",
        methods = all_methods,
    output: "{}/../results.json".format(SCRIPTS_DIR)
    shell: "python3 {{input.script}} {tempdir} {{output}}".format(tempdir=TEMPDIR)

rule collate_dataset:
    input:
        script = "collate_dataset.py",
        methods = methods,
    output: "{}/{{task}}/{{dataset}}.json".format(RESULTS_DIR)
    shell: "python3 {{input.script}} {{wildcards.task}} {{wildcards.dataset}} {tempdir}/{{wildcards.task}}/{{wildcards.dataset}} {{output}}".format(tempdir=TEMPDIR)

rule collate_method:
    input:
        script = "collate_method.py",
        meta = "{tempdir}/{task}/{dataset}/{method}.meta.json",
        metrics = metrics,
    output: temp("{tempdir}/{task}/{dataset}/{method}.result.json")
    shell: "python3 {input.script} {wildcards.task} {input.meta} {wildcards.tempdir}/{wildcards.task}/{wildcards.dataset}/{wildcards.method} {output}"

rule evaluate_metric:
    input:
        script = "evaluate_metric.py",
        data = "{tempdir}/{task}/{dataset}/{method}.method.h5ad",
    output: temp("{tempdir}/{task}/{dataset}/{method}/{metric}.metric.json")
    shell: "python3 {input.script} {wildcards.task} {wildcards.metric} {input.data} {output}"

rule run_method:
    input:
        script = "run_method.py",
        data = "{tempdir}/{task}/{dataset}.data.h5ad",
    output:
        data = temp("{tempdir}/{task}/{dataset}/{method}.method.h5ad"),
        json = temp("{tempdir}/{task}/{dataset}/{method}.meta.json"),
    shell: "python3 {input.script} {wildcards.task} {wildcards.method} {input.data} {output.data} {output.json}"

rule load_dataset:
    input:
        script = "load_dataset.py",
        code = "{}/../openproblems/version.py".format(SCRIPTS_DIR)
    output: temp("{tempdir}/{task}/{dataset}.data.h5ad")
    shell: "python3 {input} {wildcards.task} {wildcards.dataset} {output}"
